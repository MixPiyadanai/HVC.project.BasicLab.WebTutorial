%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 0.59.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2392 843
%%HiResBoundingBox: 0 0 2391.1199 842.88
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2391.1199 842.88 re
W
q
[0.24 0 0 -0.24 0 842.88] cm
q
0 0 9962.5 3512.5 re
W*
q
[36.626839 0 0 36.621094 -73.253677 -73.242188] cm
/DeviceRGB {} CS
[0.0667 0.0667 0.0667] SC
/DeviceRGB {} cs
[0.0667 0.0667 0.0667] sc
56.366699 16.336426 m
56.366699 12.842285 53.510742 10 50 10 c
46.489258 10 43.633301 12.842285 43.633301 16.336426 c
43.633301 19.830566 46.489258 22.67334 50 22.67334 c
53.510742 22.67334 56.366699 19.830566 56.366699 16.336426 c
h
45.633301 16.336426 m
45.633301 13.945313 47.592285 12 50 12 c
52.407715 12 54.366699 13.945313 54.366699 16.336426 c
54.366699 18.728027 52.407715 20.67334 50 20.67334 c
47.592285 20.67334 45.633301 18.728027 45.633301 16.336426 c
h
f
26.227051 19.844727 m
26.220703 19.844727 26.214844 19.844727 26.208496 19.844727 c
24.513184 19.849609 22.91748 20.51416 21.71582 21.71582 c
20.51416 22.91748 19.849609 24.513184 19.844727 26.208496 c
19.839844 27.90625 20.49707 29.500977 21.694824 30.698242 c
22.888184 31.891602 24.475098 32.547852 26.166016 32.547852 c
26.171875 32.547852 26.178223 32.547852 26.184082 32.547852 c
27.879395 32.543457 29.475098 31.878906 30.676758 30.676758 c
31.878906 29.475098 32.543457 27.879395 32.547852 26.184082 c
32.552734 24.486816 31.895996 22.89209 30.698242 21.694824 c
29.505371 20.501465 27.917969 19.844727 26.227051 19.844727 c
h
29.262695 29.262695 m
28.437012 30.088379 27.341797 30.544922 26.178711 30.547852 c
25.020996 30.562012 23.927246 30.102539 23.108887 29.28418 c
22.290527 28.46582 21.841309 27.375488 21.844727 26.214355 c
21.848145 25.050781 22.304688 23.955566 23.129883 23.129883 c
23.955566 22.304688 25.050781 21.848145 26.214355 21.844727 c
26.218262 21.844727 26.222656 21.844727 26.226563 21.844727 c
27.383301 21.844727 28.46875 22.293457 29.28418 23.108887 c
30.102539 23.927246 30.55127 25.017578 30.547852 26.178711 c
30.544922 27.341797 30.088379 28.437012 29.262695 29.262695 c
h
f
10 50 m
10 53.510742 12.842285 56.366699 16.336426 56.366699 c
19.830566 56.366699 22.67334 53.510742 22.67334 50 c
22.67334 46.489258 19.830566 43.633301 16.336426 43.633301 c
12.842285 43.633301 10 46.489258 10 50 c
h
20.67334 50 m
20.67334 52.407715 18.728027 54.366699 16.336426 54.366699 c
13.945313 54.366699 12 52.407715 12 50 c
12 47.592285 13.945313 45.633301 16.336426 45.633301 c
18.728027 45.633301 20.67334 47.592285 20.67334 50 c
h
f
26.208496 80.155273 m
26.214844 80.155273 26.220703 80.155273 26.227051 80.155273 c
27.917969 80.155273 29.505371 79.498535 30.698242 78.305176 c
31.895996 77.10791 32.552734 75.513184 32.547852 73.815918 c
32.543457 72.120605 31.878906 70.524902 30.676758 69.323242 c
29.475098 68.121094 27.879395 67.456543 26.184082 67.452148 c
24.529785 67.468262 22.89209 68.104492 21.694824 69.301758 c
20.49707 70.499023 19.839844 72.09375 19.844727 73.791504 c
19.849609 75.486816 20.51416 77.08252 21.71582 78.28418 c
22.91748 79.48584 24.513184 80.150391 26.208496 80.155273 c
h
23.108887 70.71582 m
23.924316 69.900391 25.009766 69.452148 26.166016 69.452148 c
26.17041 69.452148 26.174316 69.452148 26.178711 69.452148 c
27.341797 69.455078 28.437012 69.911621 29.262695 70.737305 c
30.088379 71.562988 30.544922 72.658203 30.547852 73.821289 c
30.55127 74.982422 30.102539 76.072754 29.28418 76.891113 c
28.46875 77.706543 27.383301 78.155273 26.226563 78.155273 c
26.222656 78.155273 26.218262 78.155273 26.214355 78.155273 c
25.050781 78.151855 23.955566 77.695313 23.129883 76.870117 c
22.304688 76.044434 21.848145 74.949219 21.844727 73.785645 c
21.841309 72.624512 22.290527 71.53418 23.108887 70.71582 c
h
f
43.633301 83.663574 m
43.633301 87.157715 46.489258 90 50 90 c
53.510742 90 56.366699 87.157715 56.366699 83.663574 c
56.366699 80.169434 53.510742 77.32666 50 77.32666 c
46.489258 77.32666 43.633301 80.169434 43.633301 83.663574 c
h
54.366699 83.663574 m
54.366699 86.054688 52.407715 88 50 88 c
47.592285 88 45.633301 86.054688 45.633301 83.663574 c
45.633301 81.271973 47.592285 79.32666 50 79.32666 c
52.407715 79.32666 54.366699 81.271973 54.366699 83.663574 c
h
f
69.323242 69.323242 m
68.121094 70.524902 67.456543 72.120605 67.452148 73.815918 c
67.447266 75.513184 68.104004 77.10791 69.301758 78.305176 c
70.494629 79.498535 72.082031 80.155273 73.772949 80.155273 c
73.779297 80.155273 73.785156 80.155273 73.791504 80.155273 c
75.486816 80.150391 77.08252 79.48584 78.28418 78.28418 c
79.48584 77.08252 80.150391 75.486816 80.155273 73.791504 c
80.160156 72.09375 79.50293 70.499023 78.305176 69.301758 c
77.10791 68.104492 75.550293 67.443359 73.815918 67.452148 c
72.120605 67.456543 70.524902 68.121094 69.323242 69.323242 c
h
73.833984 69.452148 m
74.990234 69.452148 76.075684 69.900391 76.891113 70.71582 c
77.709473 71.53418 78.158691 72.624512 78.155273 73.785645 c
78.151855 74.949219 77.695313 76.044434 76.870117 76.870117 c
76.044434 77.695313 74.949219 78.151855 73.785645 78.155273 c
73.781738 78.155273 73.777344 78.155273 73.773438 78.155273 c
72.616699 78.155273 71.53125 77.706543 70.71582 76.891113 c
69.897461 76.072754 69.44873 74.982422 69.452148 73.821289 c
69.455078 72.658203 69.911621 71.562988 70.737305 70.737305 c
71.562988 69.911621 72.658203 69.455078 73.821289 69.452148 c
73.825684 69.452148 73.82959 69.452148 73.833984 69.452148 c
h
f
83.663574 43.633301 m
80.169434 43.633301 77.32666 46.489258 77.32666 50 c
77.32666 53.510742 80.169434 56.366699 83.663574 56.366699 c
87.157715 56.366699 90 53.510742 90 50 c
90 46.489258 87.157715 43.633301 83.663574 43.633301 c
h
83.663574 54.366699 m
81.271973 54.366699 79.32666 52.407715 79.32666 50 c
79.32666 47.592285 81.271973 45.633301 83.663574 45.633301 c
86.054688 45.633301 88 47.592285 88 50 c
88 52.407715 86.054688 54.366699 83.663574 54.366699 c
h
f
73.791504 19.844727 m
73.785156 19.844727 73.779297 19.844727 73.772949 19.844727 c
72.082031 19.844727 70.494629 20.501465 69.301758 21.694824 c
68.104004 22.89209 67.447266 24.486816 67.452148 26.184082 c
67.456543 27.879395 68.121094 29.475098 69.323242 30.676758 c
70.524902 31.878906 72.120605 32.543457 73.815918 32.547852 c
73.821777 32.547852 73.828125 32.547852 73.833984 32.547852 c
75.524902 32.547852 77.112305 31.891602 78.305176 30.698242 c
79.50293 29.500977 80.160156 27.90625 80.155273 26.208496 c
80.150391 24.513184 79.48584 22.91748 78.28418 21.71582 c
77.08252 20.51416 75.486816 19.849609 73.791504 19.844727 c
h
76.891113 29.28418 m
76.075684 30.099609 74.990234 30.547852 73.833984 30.547852 c
73.82959 30.547852 73.825684 30.547852 73.821289 30.547852 c
72.658203 30.544922 71.562988 30.088379 70.737305 29.262695 c
69.911621 28.437012 69.455078 27.341797 69.452148 26.178711 c
69.44873 25.017578 69.897461 23.927246 70.71582 23.108887 c
71.53125 22.293457 72.616699 21.844727 73.773438 21.844727 c
73.777344 21.844727 73.781738 21.844727 73.785645 21.844727 c
74.949219 21.848145 76.044434 22.304688 76.870117 23.129883 c
77.695313 23.955566 78.151855 25.050781 78.155273 26.214355 c
78.158691 27.375488 77.709473 28.46582 76.891113 29.28418 c
h
f
65.888672 21.45459 m
66.042969 21.541016 66.209961 21.581543 66.375 21.581543 c
66.725586 21.581543 67.065918 21.396973 67.249023 21.068848 c
67.518555 20.586426 67.345703 19.977539 66.863281 19.708496 c
64.661133 18.479492 62.319824 17.491211 59.90332 16.771973 c
59.374512 16.615723 58.817383 16.916016 58.659668 17.445313 c
58.501953 17.974609 58.803711 18.53125 59.333008 18.688965 c
61.608398 19.366699 63.814453 20.296875 65.888672 21.45459 c
h
f
34.072754 21.344238 m
34.233398 21.344238 34.396484 21.305664 34.547852 21.223633 c
36.634277 20.094727 38.852051 19.192871 41.138672 18.543457 c
41.669922 18.392578 41.978516 17.839844 41.827637 17.308594 c
41.677246 16.776856 41.126465 16.470703 40.592773 16.619629 c
38.165039 17.308594 35.811035 18.266113 33.595703 19.464844 c
33.110352 19.727539 32.929688 20.334473 33.192383 20.820313 c
33.373047 21.154785 33.717285 21.344238 34.072754 21.344238 c
h
f
16.896973 39.97168 m
16.739258 40.500977 17.041016 41.057617 17.570313 41.215332 c
17.665527 41.243652 17.76123 41.257324 17.855957 41.257324 c
18.286621 41.257324 18.68457 40.976074 18.813965 40.541992 c
19.491699 38.266602 20.421875 36.060547 21.57959 33.986328 c
21.849121 33.503906 21.67627 32.89502 21.193848 32.625977 c
20.710449 32.355469 20.102539 32.528809 19.833496 33.011719 c
18.604492 35.213867 17.616211 37.555176 16.896973 39.97168 c
h
f
21.348633 65.327148 m
20.219727 63.240723 19.317871 61.022949 18.668457 58.736328 c
18.517578 58.20459 17.966309 57.896973 17.433594 58.047363 c
16.902344 58.198242 16.59375 58.750977 16.744629 59.282227 c
17.433594 61.709961 18.391113 64.063965 19.589844 66.279297 c
19.770508 66.61377 20.114746 66.803223 20.470215 66.803223 c
20.630859 66.803223 20.793945 66.764648 20.945313 66.682617 c
21.430664 66.419922 21.611328 65.812988 21.348633 65.327148 c
h
f
34.111328 78.29541 m
33.628906 78.024902 33.020508 78.198242 32.750977 78.681152 c
32.481445 79.163574 32.654297 79.772461 33.136719 80.041504 c
35.338867 81.270508 37.680176 82.258789 40.09668 82.978027 c
40.191895 83.006348 40.287598 83.02002 40.382324 83.02002 c
40.812988 83.02002 41.210938 82.73877 41.340332 82.304688 c
41.498047 81.775391 41.196289 81.21875 40.666992 81.061035 c
38.391602 80.383301 36.185547 79.453125 34.111328 78.29541 c
h
f
65.452148 78.526367 m
63.365723 79.655273 61.147949 80.557129 58.861328 81.206543 c
58.330078 81.357422 58.021484 81.910156 58.172363 82.441406 c
58.297363 82.881836 58.697754 83.168945 59.133789 83.168945 c
59.224121 83.168945 59.315918 83.15625 59.407227 83.130371 c
61.834961 82.441406 64.188965 81.483887 66.404297 80.285156 c
66.889648 80.022461 67.070313 79.415527 66.807617 78.929688 c
66.544922 78.443848 65.937988 78.262695 65.452148 78.526367 c
h
f
78.806152 67.124023 m
78.960449 67.210449 79.127441 67.250977 79.29248 67.250977 c
79.643066 67.250977 79.983398 67.066406 80.166504 66.738281 c
81.395508 64.536133 82.383789 62.194824 83.103027 59.77832 c
83.260742 59.249023 82.958984 58.692383 82.429688 58.534668 c
81.901367 58.375977 81.34375 58.678223 81.186035 59.208008 c
80.508301 61.483398 79.578125 63.689453 78.42041 65.763672 c
78.150879 66.246094 78.32373 66.85498 78.806152 67.124023 c
h
f
78.651367 34.422852 m
79.780273 36.509277 80.682129 38.727051 81.331543 41.013672 c
81.456543 41.454102 81.856934 41.741211 82.292969 41.741211 c
82.383301 41.741211 82.475098 41.728516 82.566406 41.702637 c
83.097656 41.551758 83.40625 40.999023 83.255371 40.467773 c
82.566406 38.040039 81.608887 35.686035 80.410156 33.470703 c
80.146973 32.984863 79.540527 32.802246 79.054688 33.067383 c
78.569336 33.330078 78.388672 33.937012 78.651367 34.422852 c
h
f
50 70 m
61.027832 70 70 61.027832 70 50 c
70 38.972168 61.027832 30 50 30 c
38.972168 30 30 38.972168 30 50 c
30 61.027832 38.972168 70 50 70 c
h
50 32 m
59.925293 32 68 40.074707 68 50 c
68 59.925293 59.925293 68 50 68 c
40.074707 68 32 59.925293 32 50 c
32 40.074707 40.074707 32 50 32 c
h
f
Q
q
[67.764702 0 0 67.754074 3809.1912 943.19141] cm
/DeviceRGB {} CS
[0.0667 0.0667 0.0667] SC
/DeviceRGB {} cs
[0.0667 0.0667 0.0667] sc
0 10.940001 m
0.000039 20 l
3.840039 20 l
4.986739 20 5.893439 19.59334 6.560039 18.780001 c
7.22664 17.966661 7.560039 16.913301 7.560039 15.620001 c
7.560039 15.273341 7.516699 14.87668 7.430039 14.43 c
7.34338 13.98332 7.196719 13.55 6.990059 13.13 c
6.7834 12.71 6.503399 12.33 6.150059 11.99 c
5.796719 11.65 5.340059 11.41334 4.780059 11.28 c
5.340059 10.93334 5.746719 10.469999 6.000059 9.889999 c
6.253399 9.31 6.380059 8.699999 6.380059 8.06 c
6.380059 6.8333 6.040059 5.889999 5.360059 5.23 c
4.680059 4.57 3.753359 4.24 2.580059 4.24 c
0.000059 4.24 l
0.000059 10.459999 l
0.700059 10.459999 l
0.680059 5.059999 l
2.64006 5.059999 l
3.746759 5.059999 4.526759 5.349999 4.98006 5.929999 c
5.43336 6.509999 5.660059 7.219999 5.660059 8.06 c
5.660059 8.96666 5.4534 9.669999 5.04006 10.169999 c
4.626719 10.669999 4.060059 10.919999 3.340059 10.919999 c
0.72006 10.919999 l
1.16006 11.799999 l
3.84006 11.799999 l
4.38672 11.799999 4.85336 11.923339 5.24006 12.169999 c
5.62676 12.416659 5.94338 12.726659 6.19004 13.099999 c
6.436699 13.47334 6.620039 13.893339 6.74004 14.36 c
6.86004 14.82666 6.92004 15.28 6.92004 15.719999 c
6.92004 16.14666 6.86004 16.56666 6.74004 16.98 c
6.62004 17.393339 6.44004 17.76334 6.20004 18.09 c
5.96004 18.41666 5.6467 18.68 5.26004 18.880001 c
4.87338 19.080002 4.41338 19.18 3.88004 19.18 c
0.68004 19.18 l
0.70004 10.940001 l
0.00004 10.940001 l
0 10.940001 l
h
15.5 6.14 m
15.5 6.22 15.73666 6.98334 16.209999 8.43 c
16.683338 9.876661 17.199999 11.46 17.759998 13.18 c
18.319998 14.900001 19.073298 17.173401 20.019999 20 c
20.879999 20 l
15.579999 4.24 l
15.419999 4.24 l
10.159999 20 l
10.979999 20 l
15.5 6.14 l
h
15.14 15.520001 m
14.42 15.520001 l
15.62 20 l
16.34 20 l
15.14 15.520001 l
h
25.559999 11.020001 m
27.34 12.68 l
27.9 13.200001 28.34 13.756701 28.66 14.35 c
28.98 14.9433 29.139999 15.540001 29.139999 16.139999 c
29.139999 16.4 l
29.153339 16.82666 29.099998 17.206659 28.98 17.539999 c
29.719999 17.539999 l
29.82666 17.179998 29.87332 16.80666 29.85998 16.419998 c
29.85998 16.139998 l
29.85998 15.419997 29.67664 14.733297 29.30998 14.079998 c
28.943321 13.426699 28.433321 12.786698 27.77998 12.159998 c
26.05998 10.539998 l
25.513321 10.019999 25.06332 9.533298 24.70998 9.079998 c
24.35664 8.626698 24.179979 8.059998 24.179979 7.379998 c
24.179979 7.259998 l
24.179979 6.553339 24.376638 5.983298 24.769979 5.549998 c
25.163321 5.116698 25.71332 4.899998 26.419979 4.899998 c
26.92664 4.899998 27.339979 4.976658 27.659979 5.129998 c
27.979979 5.283338 28.306639 5.513338 28.639978 5.819998 c
29.099977 5.299998 l
28.726637 4.953338 28.343298 4.693338 27.949978 4.519999 c
27.556658 4.346659 27.046638 4.259998 26.419977 4.259998 c
25.606638 4.259998 24.916677 4.523338 24.349977 5.049998 c
23.783278 5.576658 23.499977 6.306698 23.499977 7.239998 c
23.499977 7.399998 l
23.499977 8.159998 23.689978 8.809999 24.069977 9.349999 c
24.449976 9.889998 24.946636 10.446698 25.559977 11.019999 c
25.559999 11.020001 l
h
29.440001 18.299999 m
28.61998 18.299999 l
28.15332 18.98 27.406679 19.326698 26.37998 19.34 c
26.033319 19.34 25.71998 19.299999 25.43998 19.219999 c
25.43998 19.92 l
25.71998 19.973341 26.033319 20 26.37998 20 c
27.099979 20 27.71998 19.85334 28.239981 19.559999 c
28.759981 19.266659 29.159981 18.846659 29.439981 18.299999 c
29.440001 18.299999 l
h
32.459999 4.24 m
32.459999 20 l
32.98 20 l
32.98 4.24 l
32.459999 4.24 l
h
42.52 19.959999 m
42.559944 19.320019 l
40.599945 19.186678 39.039944 18.373339 37.879944 16.880018 c
36.773243 15.493319 36.219944 13.820019 36.219944 11.860018 c
36.219944 10.833318 36.386604 9.943317 36.719944 9.190018 c
37.053284 8.436718 37.553284 7.706718 38.219944 7.000018 c
39.553246 5.600017 41.219944 4.900018 43.219944 4.900018 c
44.433243 4.900018 45.526543 5.160018 46.499943 5.680017 c
47.473343 6.200017 48.266644 6.926718 48.879944 7.860018 c
49.359943 7.480018 l
48.693283 6.466718 47.826645 5.673318 46.759945 5.100017 c
45.746643 4.553358 44.599945 4.286697 43.319946 4.300037 c
42.239944 4.300037 41.226547 4.483378 40.279945 4.850038 c
39.333344 5.216698 38.499947 5.780038 37.779945 6.540038 c
37.059944 7.313377 36.516647 8.113338 36.149944 8.940038 c
35.783241 9.766738 35.599945 10.740038 35.599945 11.860038 c
35.613285 13.980038 36.219944 15.793438 37.419945 17.300037 c
38.699944 18.913338 40.399944 19.800037 42.519943 19.960037 c
42.52 19.959999 l
h
43.740002 19.980021 m
44.833302 19.913361 45.833401 19.653381 46.740002 19.200041 c
47.780003 18.6667 48.653301 17.913342 49.360001 16.940041 c
48.900002 16.540041 l
48.260002 17.42004 47.4533 18.11334 46.480003 18.620041 c
45.640003 19.046701 44.720005 19.286701 43.720005 19.34004 c
43.740002 19.980021 l
h
57.619999 16.06 m
57.619999 4.24 l
56.959999 4.24 l
56.959999 16.06 l
57.619999 16.06 l
h
63 20 m
63 19.32 l
57.619999 19.32 l
57.619999 17.360001 l
56.959999 17.360001 l
56.959999 20 l
63 20 l
h
70.940002 6.14 m
70.940002 6.22 71.176666 6.98334 71.650002 8.43 c
72.123337 9.876661 72.639999 11.46 73.200005 13.18 c
73.76001 14.900001 74.513306 17.173401 75.460007 20 c
76.320007 20 l
71.020004 4.24 l
70.860001 4.24 l
65.599998 20 l
66.419998 20 l
70.940002 6.14 l
h
70.580002 15.520001 m
69.860001 15.520001 l
71.059998 20 l
71.779999 20 l
70.580002 15.520001 l
h
78.919998 10.940001 m
78.920036 20 l
82.76004 20 l
83.906738 20 84.813438 19.59334 85.480042 18.780001 c
86.146645 17.966661 86.480042 16.913301 86.480042 15.620001 c
86.480042 15.273341 86.436699 14.87668 86.350044 14.43 c
86.26339 13.98332 86.116722 13.55 85.910065 13.13 c
85.703407 12.71 85.423401 12.33 85.070068 11.99 c
84.716736 11.65 84.260071 11.41334 83.700066 11.28 c
84.260063 10.93334 84.666725 10.469999 84.920067 9.889999 c
85.173409 9.31 85.300064 8.699999 85.300064 8.06 c
85.300064 6.8333 84.960068 5.889999 84.280067 5.23 c
83.600067 4.57 82.67337 4.24 81.500069 4.24 c
78.920067 4.24 l
78.920067 10.459999 l
79.620064 10.459999 l
79.600067 5.059999 l
81.560066 5.059999 l
82.666763 5.059999 83.44677 5.349999 83.900063 5.929999 c
84.353355 6.509999 84.580063 7.219999 84.580063 8.06 c
84.580063 8.96666 84.373405 9.669999 83.96006 10.169999 c
83.546715 10.669999 82.980057 10.919999 82.260063 10.919999 c
79.64006 10.919999 l
80.080063 11.799999 l
82.760063 11.799999 l
83.306725 11.799999 83.773361 11.923339 84.160065 12.169999 c
84.546768 12.416659 84.863388 12.726659 85.110046 13.099999 c
85.356705 13.47334 85.540047 13.893339 85.660049 14.36 c
85.780052 14.82666 85.84005 15.28 85.84005 15.719999 c
85.84005 16.14666 85.780052 16.56666 85.660049 16.98 c
85.540047 17.393339 85.360046 17.76334 85.120049 18.09 c
84.880051 18.41666 84.566711 18.68 84.180046 18.880001 c
83.793381 19.080002 83.333389 19.18 82.800049 19.18 c
79.600052 19.18 l
79.620049 10.940001 l
78.920052 10.940001 l
78.919998 10.940001 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
